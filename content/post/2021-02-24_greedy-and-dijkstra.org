---
title: "理解贪心算法与Dijkstra算法"
date: 2021-02-24T10:52:06+08:00
draft: false
categories: ['learning']
tags: ['algorithm']
cover: '/img/2021-03-01_greedy.jpg'
---
* 贪心与动态规划
  我们知道动态规划求解的问题需要具有 
  1. 最优子结构 
  2. 重复子问题 

  具有最优子结构的问题有时也可以用贪心算法求解。条件是最优解中只包含一个子问题的最优解，而一般的动态规划
  最优解包含多个子问题的最优解。比如fib算法，fib(5)需要fib(4)与fib(3)两个子问题的解，无法使用贪心算法。
  阶乘算法factorial(5)的递归解只需要使用一个子问题factorial(4)的解，这种情况使用贪心算法，即无需自底向上
  记录每一子问题的解，只需记录当前最近一子问题的解用于求解当前解。

  一个更直观的例子是0-1背包问题和部分背包问题。背包问题要求在指定的一些商品中选出能装入背包重量的最大价值的商品
  组合。0-1背包问题中的每个商品是一个整体，要么整个装入，要么不装。部分背包问题里的商品类似水或金沙，可以分割后
  装入部分。0-1背包问题是典型的动态规划例子，而部分背包则可以用贪心。

  我们容易得到背包问题的最优子结构：要求重量的最优解包含了背包去掉某个物品重量后的最优解。考虑所有物品的最优解中
  包含了考虑其中部分物品得到的最优解。对于0-1背包问题，通过以上两个维度我们可以列出状态转移方程：从考虑0个物品开始
  依次加入每个物品，重量从0开始递增至所给背包重量；当前重量下考虑了当前加入所有物品能得到的最大价值 = max{(当前最大重量减去
  当前物品重量后，不考虑当前物品能得到的最大价值 + 当前物品价值), (同等重量，不考虑当前物品能得到的最大价值),(
  考虑了当前物品，最大重量-1时能得到的最大价值)}. 对于部分背包问题，如果还是使用0-1背包的方法来求解，我们会发现这次
  要求的重量都是连续的，每次递增的重量无法确定。但是不妨假设我们可以每次递增无穷小的重量，就容易看出每次状态转移时，
  能得到最大价值的选择一定是从剩余物品中（价值/重量）比例最大的物品中抽取加入。这样每次求最优解用到的唯一一个最优
  子问题就能被确定下来，我们可以直接使用贪心算法，即，永远在剩余物品中选择（价值/重量）比例最大的物品加入，直到包
  满。

  另一个例子是活动选择问题。对几个互相竞争的活动进行调度，希望找出一个最大的相互兼容活动集合。给出每个活动的开始时间与持续时长，
  我们希望得到一定时间段内所能容纳的最多活动数量（多个活动间不能有重叠时间）。容易找到这个问题的最优子结构：每个活动将整体时间分为
  两部分：该活动前的时间与该活动后的时间。在这两段时间内我们都需要最大化执行任务数，两段的任务数之和+1，所得的就是整个时间段的最优
  解。找到最优子结构后就不难得到动态规划算法了。我们知道在这个问题的最优解中包含了两个子问题的最优解，即：活动左边时间段最优解与右边时间段
  最优解。如果我们进一步观察，可以发现如果我们将选择的当前活动限制为当前时间段后开始并能最早执行完的活动，得到当前最优解所需的子问题
  就只剩一个：当前活动后的时间段。可以证明该贪心选择能够得到最优解。通过一个简单的变换，我们将原来需要2个子问题的解变成了只需要1个子问题的解。
  这种情况下，我们无需记录所有子问题的解来进行动态规划自底向上求解当前解，只需要记录前一子问题的解，自顶向下求解问题。

  一些能够轻易看出使用动态规划求解的问题，可以思考能不能通过变换求解过程得到贪心策略来进一步优化，给出贪心算法。
* 贪心策略的基本内容
  使用贪心算法需要的条件有两个：
  1. 贪心选择性质
  2. 最优子结构

  贪心选择性质即上文中我们说的“能找到只包含一个子问题的最优解“。通过适当的变换，一些问题可以找到贪心选择性质，如上文中的活动调度问题。
  最优子结构即动态规划中的“由子问题的最优解构成当前问题最优解”的性质。满足这两个条件的问题即可使用贪心算法。但在有些情况下，不能轻易找出
  最优子结构，但是问题的确可以使用贪心算法求解。比如[[https://pintia.cn/problem-sets/994805342720868352/problems/994805403651522560][PAT-1067]].
  
* Dijkstra算法与Bellman-Ford算法
** Dijkstra算法
  作为图论中几乎是最有名的算法，Dijkstra算法解决了最短路径问题。从算法思想的角度来说，Dijkstra算法使用了贪心策略。与之相对的是
  Bellman-Ford算法。同为计算最短路径的算法，Bellman-Ford算法使用了动态规划的思想，复杂度为O(n^3)。Dijkstra算法在此基础上
  进一步限定条件（Bellman-Ford算法可以用来计算带有负权的图，Dijkstra只能用于权值为正数的情况）利用了问题具有贪心选择性质，用贪心策略
  将最短路径算法的复杂度进一步减到了O(n^2).

  算法在初始化时把所有节点分为两个集合：已考虑的结点集合S，待加入的结点集合Q. 开始时在S中的节点只有路径起始点一个。记录Q中所有点到S的
  最短距离。初始时除了起始点的邻接点距离为邻接边的权重，其他点的距离都为无穷。每次选择距离最近的点v加入S，更新与v相邻，在Q中的点与S的距离：
  若（v原来距S的距离+v与Q中点u的距离）<（u距S的距离），更新u距S的距离为（v原来距S的距离+v与Q中点u的距离）.更新S与Q，直到所有Q中的点加入S。
  算法中寻找“Q中离S最近的点”可以使用优先队列，队列中元素按照距离从小到大出队。另一种在机试中更常用的做法是遍历所有Q中的元素找出符合的点。其实
  由于优先队列的性质，两种方法得到的时间复杂度是相同的，为O(n^2).

  我们把Dijkstra算法中一点v从Q中加入S过程中进行的操作：更新Q中与v相邻的节点u到S的距离 称为“松弛”操作。就像原来u到S间的距离为5，经过v后到
  S的距离为3，可以看作把u到Q之间的路径“松弛”了。
  
** Bellman-Ford算法
   Dijkstra算法适用于没有负数权值的情况。如果我们想要在带有负数权值的图中寻找单源点最短路径并且判断该图是否带有负边，可以使用Bellman-Ford算法。
   Dijkstra算法在每个节点进入S时用“松弛”操作更新剩余在Q中节点的距离，需要“松弛”的点共n-2个（去除第一个和最后一个）。和Dijkstra算法不同，Bellman-Ford
   算法不将整个节点的集合分作2部分，而是直接直接对所有边进行“松弛”，共进行V-1次，V为点的数量。易得，该算法复杂度为O(VE)，其中V为图中节点个数，E为边数。

   #+begin_src
for (var i = 0; i < n - 1; i++) {
    for (var j = 0; j < m; j++) {//对m条边进行循环
      var edge = edges[j];
      // 松弛操作
      if (distance[edge.to] > distance[edge.from] + edge.weight ){ 
        distance[edge.to] = distance[edge.from] + edge.weight;
      }
    }
}
   #+end_src

   接下来我们来证明算法的正确性。首先，单源最短路径问题是具有最优子结构的。每个点到起点的最短距离是该点所有邻接点到起点的最短距离与该点与对应邻接点的距离之和中
   的最小值。由此得到的动态规划算法即Bellman-Ford算法。对于某一点u的每条边的一次“松弛”即用该点上更小的代价更新当前代价（使用代价更小的子问题解）。循环中第i次
   对所有边进行“松弛”后得到的是源点最多经过i条边到达其他顶点的最短距离。这听着感觉怎么这么熟悉，就像是在求传递闭包。那是不是把每个点都作为源点操作n次就得到Warshall算法？
   Warshall算法相当于对每个点k，遍历所有点pair i和j，如果i和j之间通过k能够减少距离，将这个新的距离更新为i与j之间的距离。Bellman算法中对边的“松弛”是“松弛”一点
   到源点的距离，Warshall算法中的“松弛”是松弛能够通过当前点缩短距离的两点pair之间的距离。

   那么为什么Bellman-Ford算法可以用来判断带有负权环的图，Dijkstra不行？又是怎么判断的？Dijkstra算法是在哪里实现了贪心策略降低了复杂度？首先，通过之前的介绍我们知道Dijkstra算法与Bellman-Ford算法的基本操作都是
   通过对比某点是否经过一相邻点两种情况下离源点的距离来进行“松弛”操作（Floyd-Warshall算法是通过对比是否经过一点的任意两点之间的距离进行“松弛”）.Dijkstra与Bellman-Ford的不同之处在于Dijkstra算法每次选择一点加入
   S集合，加入时松弛其所有相邻边，之后就不再考虑该点。因为在正权的情况下，按到S的距离从小到大将点加入S能保证加入的点均已取到到源点的最短路径。通过确定了点的操作顺序，边的“松弛”顺序
   也就被确定了。能确定一个点加入S的顺序，每次解决子问题只需要上一个子问题的解（集合、距离的上一状态）就是Dijkstra算法引入的贪心策略，但是代价就是优先队列的不同实现可能引入额外的复杂度。在有负权边的情况下，该贪心策略会失效。
   Dijkstra算法中集合Q中的点u一旦进入了S，我们就认为u已经取到了最短路径，之后不再考虑它。但是如果存在负权边，虽然在经过已经进入S的节点的路径中的u取得了最短路径，经过还在Q中节点间的负权边后u可能能取到更短路径。贪心选择不再正确。
   Dijkstra算法的贪心选择策略使其能够在确定点的操作顺序后每次操作一个点，经过一次遍历后完成。使用的唯一子问题是所有点离S的距离。与之相对的是，Bellman-Ford算法使用了所有子问题的解，没有将点分为两个集合，把其中的S集合作为唯一
   需要记录距离的子问题。这种方式下我们无法在每次确定唯一需要操作的点，也就无法确定对边的松弛顺序。于是我们选择在每轮把每条边都松弛一遍，也就是每轮检查一遍每个点是否能够通过经过与其相邻的点来缩短与源点间的距离。如此进行V-1轮，算法
   就完成了。可以类比Warshall算法在第i轮操作后得到两点间最大长度为i的传递矩阵，在第i轮操作后，我们得到的是源点经过i条边的能到达的点的最短距离。如果途中没出现带负权重的路径，从源点到任意一点的最短路径上的边数不会超过V-1，因此
   在进行V-1轮后停止即可。该算法在图中存在负权环的时候并不能给出正确的最短路径（有负权环说明可以无限绕圈减少代价），但是可以判断图中是否存在负权环。因为负权环可以无限制的降低总花费，所以我们可以在第V轮停止而不是在V-1轮就停止。如果
   图中有负权环，在第V轮的松弛后有的点的距离能继续减少，反之则不会。

   参考链接：[[https://zhuanlan.zhihu.com/p/72185593][知乎Bellman-Ford算法]] [[https://zh.wikipedia.org/wiki/%E8%B4%9D%E5%B0%94%E6%9B%BC-%E7%A6%8F%E7%89%B9%E7%AE%97%E6%B3%95][wiki]]
