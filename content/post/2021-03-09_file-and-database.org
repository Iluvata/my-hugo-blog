---
title: "文件系统与数据库系统"
date: 2021-03-09T11:40:13+08:00
draft: false
tags: ['Operating System']
categories: ['learning']
cover: '/img/2021-03-09_database.png'
---
* 数据库系统
  数据库系统的组成部分包括数据库、软件、硬件和用户。数据库指的是系统中各种数据，包括目标数据
  和描述数据。软件包括DBMS和开发工具等。
  我们一般使用的数据库系统都是关系型数据库，这里将谈论的也主要是关系型。NoSQL之类的非关系型
  数据库以后有时间可以去了解一下，我目前的理解是非关系型数据库可以支持使用一些更灵活的结构来
  进行数据的存储，如json，可以避免数据结构多样性带来的问题。除了目前最常会用的关系型数据库外，
  其他数据库结构还有层次模型和网状模型。
  
  数据库系统的层次结构如下
  
  *软硬件层次*
  
  [[/img/2021-03-14_database-hardware-structure.jpg]]

  *DBMS管理层次*
  [[/img/2021-03-14_dbms-management-structure.jpg]]

  关系型数据库中的“关系”即我们在离散数学中学过的关系(relation)：多个集合的笛卡尔积的子集。
  只是我们在离散数学中讨论的一般是二元关系，只考虑两个集合。在关系型数据库中，我们考虑的范围
  变成了n个集合，即数据库一张表中的n个字段。对于讨论n元关系的关系型数据库，我们能够进行的基本
  操作有SELECTION, PROJECTION, JOIN. SELECTION与SQL语句中的查找语句一样，从表中找出满足
  条件的语句。PROJECTION删除一些字段，只留下（展示）我们需要的字段。JOIN得到两张表的笛卡尔积。

** 数据库三范式
  数据库在设计表结构的时候为了减少冗余，避免在对数据进行操作时产生问题，需要遵循三范式。第一范式：
  所有字段存储的都必须是最小的原子字段，不允许像结构体这样的复合结构。第二范式：所有字段必须完全
  依赖于主键。如选课表(课程id，学生id，学生姓名，分数）中学生姓名没有完全依赖于主键（课程id，学生id），
  需要新建一个表（学生id，学生姓名）。否则每次存入相同学生id不同课程id的数据时都会存入相同的
  学生姓名，增加了不必要的数据存储导致冗余。第三范式：所有非主键字段直接依赖于主键，不能存在传递依赖。
  学生表（学生id，学院id，学院电话）中学院电话通过学院id传递依赖于主键学生id，需要拆分出（学院id，学院电话）
  表。第三范式还可以用另一种形式表达：非主键间不能有依赖关系。BC范式在第三范式的基础上进一步限制
  了主键间也不能有依赖。表（学生id，老师id，课程id）中，每个老师只能教一门课，每门课程可以有多个
  老师，每个学生选了一门课后有对应的一名固定老师。表中三个字段都为主键，但是老师和课程之间存在依赖。
  [[/img/2021-03-11_bcnorm.png]]
** 数据库事务
  在对数据库进行操作的时候，我们希望有一些操作序列不可被分割，要么全部执行，要么不执行，中间没有别的
  操作插入。数据库系统提供了把多条作为一个整体进行操作的功能，把这种整体称为事务。事务具有ACID特性：
  Atomicity原子性，Consistency一致性，Isolation隔离性，Durability持久性。原子性是我们之前说的
  要么所有语句全部执行成功，要么全部不执行。一致性是指事务执行前后特定状态保持一致，如转账操作前后的
  转账双方的总金额。隔离性是多个并发事务之间不能互相干扰。持久性是事务提交后的改变是持久（永久）的，
  不会丢失COMMIT.

  如果我们不考虑事务的隔离性，可能会发生的情况有：
  
  1. 脏读：事务在提交前的修改被读到
  2. 不可重复读：事务内的几次查询间别的外部语句修改了数据，导致一次事务中相同的读得到不同数据
  3. 虚读（幻读）：一个事务内对数据进行操作时别的外部语句修改了数据，导致对被修改的记录的操作失败

  不可重复读与幻读的区别是不可重复读查询同一数据项，幻读操作一批数据。
  
  为了提供不同场景对隔离性的需求，对于事务的隔离性定义了4中隔离级别：读未提交(read uncommitted), 读提交(read committed),
  可重复读(repeatable read), 序列化(serializable). 序列化可避免脏读、不可重复读、幻读；可重复读可避免
  脏读、不可重复读；读提交可避免脏读；读未提交无法保证任何情况。

  参考链接：[[https://developer.ibm.com/zh/technologies/databases/articles/os-mysql-transaction-isolation-levels-and-locks/][MySQL事务隔离级别和锁]] [[https://www.cnblogs.com/fjdingsd/p/5273008.html][数据库事务的四大特性以及事务的隔离级别]] 
* 文件系统
  文件系统是操作系统中的一个模块，起着管理用户数据的重要作用。文件和目录都分别有各自的逻辑
  结构和物理结构。文件根据是否具有内部结构可以分为有结构文件和无结构文件（流式文件）。
  无结构文件包括文本文件，源代码文件等，其中的数据按顺序保存，没有内部结构。有结构
  文件按照条目(entry)组织数据，按存储的结构不同分为顺序文件、索引文件和顺序索引文件。
  顺序文件按顺序排列条目。索引文件把条目记在一张索引表上，可以加快检索。顺序索引文件
  在保留顺序文件按序排列条目特征的同时引入索引，查找记录时就像我们查字典，
  先按照索引找到归属的首字母或前几个匹配字母，再按序查找到精确的记录。

  我们在上面说的文件结构是逻辑结构，是系统在面对用户时文件的存储方式，形式可以由用户（应用）来定。
  对于操作系统来说还需要管理文件在磁盘上的存放方式。磁盘结构包含磁盘、磁道、柱面、扇区。
  系统在进行磁盘分配的时候使用的单位是簇，存储空间的基本分配单位是磁盘块，一个簇一般是整数倍的连续磁盘块。
  在面对磁盘存储时文件系统的分配方式（物理结构）有连续分配、链接分配、索引分配。与逻辑结构
  相比多了链接分配，因为逻辑结构中不需要涉及到物理空间，就算在磁盘上是用链接的方式保存的，
  在展示给用户的时候直接按照用户需要处理成顺序文件或者索引文件就好了。值得一提的是链接分配中又
  可以分为显式链接和隐式链接。隐式链接就是我们一般理解的链表形式，显式链接把“链接”的工作集中放到了
  一张FAT表上，在上面记录各盘块的链接顺序，可以在检索的时候无需一个一个盘块顺序找下去，只需要在FAT上
  找好记录的位置，直接访问对应的盘块。FAT表还有个好处是可以在上面用-1标记空闲块来进行空闲空间管理。

  [[/img/2021-03-14_fat.png]]
  
  文件系统除了管理文件在磁盘上的存放，还需要管理磁盘上的空闲空间以便于在给文件分配空间的时候使用。这就是
  文件存储空间管理。文件存储空间管理的方式包括空闲表法、空闲链表法、位图和成组链接。空闲表对应连续分配，
  记录每个空闲块的起始位置的块数；空闲链表对应链接分配，用链表记录空间块。成组链接把空闲块按照大小分组，
  同组的用链表相连，每组头块用索引记录。

  我们现在已经介绍了文件系统对文件以及空闲空间的管理，我们还需要在整个系统中确定一种找到我们当前需要的那个文件的方法。
  这就是文件目录概念的由来。每个文件有一些基本信息（如权限控制，文件名，大小，磁盘位置等）需要存储，文件系统把
  每个文件的信息放在它唯一对应的文件控制块FCB中，类似于进程控制块PCB。由于FCB过大，为了加速检索有的系统还
  引入了只记录除文件名外其他信息的索引节点，在检索的时候只需要按名先找到对应的索引节点指针，再接着访问索引节点
  获取信息。

  [[/img/2021-03-14_inode.png]]
  
  目录结构的实现亦可以分为逻辑结构和物理结构。这里更重要的是目录的逻辑结构，可以分为单级目录、两级目录、树形目录（多级目录）和
  图形目录（无环图）。按名字理解，单机目录只能把所有文件放在一个目录下，只能用于单用户环境。两级目录区分了用户空间。多级目录
  即我们现在常用的目录。
  
* 数据库系统与文件系统的比较
  数据库系统和文件系统都是计算机用来管理数据的技术。文件系统作为操作系统的一部分，将数据
  以文件的形式保存，支持多种异构结构。但是数据冗余大，与程序的独立性差，访问困难，数据之间相互
  孤立。数据库系统建立在操作系统之上，将数据看作独立于程序的对象进行存储访问。数据的冗余度
  可控，独立性好，结构化；并且具有统一的控制机制保障安全性和完整性。
** 数据完整性
  数据的完整性包括数据的正确性，有效性和相容性，通过完整性约束条件进行定义和检查。完整性
  可以分为实体完整性、域完整性、参照完整性和用户定义的完整性。SQL中的关键字有not null, 
  unique, primary key, foreign key, check.
  
  参考链接：[[/file/database-chapter1.pdf][北航数据库课件]] [[https://blog.csdn.net/u013634252/article/details/80696882][数据库中的数据完整性约束]]
