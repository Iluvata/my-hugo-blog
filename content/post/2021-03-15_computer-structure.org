---
title: "计算机体系结构与组成原理"
date: 2021-03-15T13:13:42+08:00
draft: false
tags: ['operating system']
categories: ['learning']
cover: '/img/2021-03-15_A-Simplified-MIPS-Processor-Architecture.png'
---
* 计算机体系结构概要
  计算机体系结构讲的是同系列计算机为操作系统提供的接口（包括机器语言、汇编语言等），以及底层
  硬件的结构设计。计算机组成原理讲的是硬件实现。目前的计算机一般都是用冯诺依曼结构，特点是
  存储程序，即将程序作为数据和数据存储在同一存储器中。要执行程序的时候从第一个存储单元开始
  顺序执行，根据控制流跳转。与之对应的是哈佛结构，将数据和程序分别存放在两个不同的存储器
  中。

  要了解计算机，首要的是了解计算机是怎么存储数据的。包括补码、原码等各种格式和他们的运算。
  在了解了数据在计算机中的表示方式后，我们需要知道他们在哪里如何被存储，在哪里怎么进行运算。
  在了解计算机进行运算的步骤之前需要知道计算机是用什么格式发出命令的，即机器语言与汇编语言。
  以上便是计算机主机的任务：存储、运算、控制。除此之外，计算机还需要规范数据如何在各部件间
  传输，即确定总线的相关标准。最后，如果只有之前的操作我们只能将计算机看作一个黑盒，什么都
  进不去，什么都出不来，就算一直在计算也没有用处。因此对于输入/输出的讨论也极为重要。

  [[/img/2021-03-15_von-neumann.jpg]]
  
  现代计算机中，控制器和运算器一起被叫做CPU，CPU和主存一起组成主机，主机与外设一起组成硬件设备。
  硬件和软件一起组成计算机系统。
* 存储器层次结构
  目前我们能用于做存储器的材料与工艺有很多，不同方式/目的做出的存储器特性也不同。如磁盘，磁带，
  RAM，ROM，FLASH等。存储器的分类方式有很多，如用用掉电后能否保存数据可以分成挥发性存储器与
  非挥发性存储器；能否随机访问可以分为随机访问存储器与顺序访问存储器等。除此之外，就算是在
  主机内部使用的存储器，不同工艺也有很大的性能与价格差距。SRAM可以用于寄存器，速度最快，
  但是集成度低，在单位空间内塞不下很大容量，并且价格贵。DRAM动态随机访问存储器一般用于主存，
  相比SRAM速度较慢，但是集成度较高并且便宜。

  我们对计算机性能的要求是无上限的，但同时成本也需要控制在可接受的范围。因此就算我们让一台计算机
  主机内所有的存储器都用SRAM，我们还是会想要更大更快的内存。为了解决上述价格与速度的矛盾，我们
  引入了分层次存储器。在拥有DRAM作为主存的大容量低价格的同时使用SRAM作为CPU内部寄存器以获取高速度。
  完整的层次结构中速度从快到慢，容量从小到大是：寄存器-cache-主存-外存.

  主存与CPU之间通过总线相连，数据从主存中取出到寄存器中，在寄存器中传入ALU等部件组成的数据通路进行
  计算，得到的结果也存放在寄存器，需要时写入主存中。随着硬件的发展，虽然主存的速度也在不断增长，
  但CPU速度的增长速度远大于主存，两者之间的速度差距越来越大。为了调节两者间的速度差异，最大
  程度发挥CPU性能，Cache作为高速缓存被引入。Cache具有接近CPU的存取速度，保存最近常用的主存中
  的单元副本，并且实时更新。主存、Cache、CPU之间的关系，乃至整个存储器层次结构中上下层软硬件
  的关系，我们可以形象的用柜台和仓库进行类比。存取速度更快但是容量更小的上层存储器是商店里的柜台，
  下层存储器是商店的仓库，数据是仓库中的物品。当用户/计算机需要购买物品时，如果柜台中有物品
  就可以直接从柜台快速拿取，若没有则需要经过繁琐的步骤去仓库取出。但是我们不能把仓库中所有物品
  直接放入柜台。还有一种类比是把数据看作学生使用的文具，最上层，即速度最快，容量最小的一层是
  学生书桌上的文具盒，需要的时候可以随时取用。下一层是书包，可能有些较大的文具无法放在文具盒中，
  这时就需要花稍多的时间从背包内取出。再下一层可以是学生的家。有时候可能会把要用的东西落在了家中，
  或者书包也装不下，只能放在家中。这时若再需要用到就要花大代价跑回家去拿。但是一旦从家中拿到了
  文具，已经将它装在了包里，那下次再次取用就只要去包里找就行了。CPU内寄存器、Cache、主存间的关系
  大致是这样，只是这里的“物品”：数据是可以被拷贝到上层存储器的，从下层“取走”到上层后下层还保留着
  一份原本，上层只是“复制”走了一份副本。值得一提的一点是为什么我们每天只需要一个包来装学习用品
  就够日常使用了，而不是经常跑回家拿东西呢？假设我们把所有科目的书和试卷等全都放在家里，每天的
  课程表让我们知道当天的科目，再加上当前的课程进度，综合起来我们可以判断只需要带走一部分相关的资料
  而非全部科目的所有资料就足够当天的学习使用了。在计算机中也有类似的情况，就是计算机在执行一道
  程序的时候在一段时间内会反复使用同一段或相邻的空间。这就相当于得知了当前的“课程进度”和“课表”
  后，我们能够确定大致需要带的资料，在一段时间（比如一天）内无需反复回家更换。程序在一段时间
  内反复访问相同的空间的特性叫做时间局部性，访问某空间后大概率访问相邻空间的特性叫做空间局部性。
  程序的局部性原理使得是的Cache能够作为CPU与主存间的高速缓存大大提升整体系统的效率。
  
  那么我们在使用Cache的时候需要注意哪些细节呢？首先，由于一个学生在上学的时候不可能把整个家里所有
  东西都装在背包中，需要挑选出每天要带走的东西。Cache需要确定保存哪些副本，当空间满了的时候
  如何进行替换。Cache的替换策略有随机替换, FIFO, LRU, LFU. 其次，Cache中保存的是主存中的副本，
  Cache以行为单位，一行内可以包括多个主存单元（一般是1字节大小），与行对应大小的单位在主存
  中被称为块。Cache最理想的实现方式是每行都能保存主存中任意块的副本，但是由于Cache的总
  容量比主存小，我们需要对存在每行中的每个块指定一个标识以分辨对应主存中的位置。
  按照上面的设想，我们需要在每行保存完整的主存块地址（非存储单元地址，用于分辨块中不同存储
  单元的最后几位不用记录）作为唯一标识，这样每次想要找出CPU给出的主存单元对应的Cache行所需
  的开销就会比较大。那么我们可以换一种思路进行映射：由于主存容量较大，地址的长度也比Cache中地址要长，
  那我们把高位多出来的那部分作为唯一标识，剩下的主存地址就直接用到Cache上当作行地址，这样需要保存
  的标识长度就短了很多，每次在Cache中找对应的主存块也不用对比所有行的标识，只需找到编号低位
  与地址相同的那一行。以上两种Cache与主存之间的映射方式分别是全相联映射和直接映射。有的时候，
  我们虽然用不起全相联映射，又发现直接映射太过于死板以至于在跑一些程序的时候无法很好的
  完整高速缓存的工作（无法很好利用时间局部性），那就可以将两者结合起来，先将Cache中的行分组，
  在组内进行任意对应。这就是组相联映射。
* 指令系统/CPU
  在上面我们讲了计算机整体的体系结构和存储器相关内容，却始终没有继续探讨更加底层的硬件
  实现。但是在CPU与指令系统这章中，我们必须继续深入，探讨CPU内部硬件的数据通路，进而
  理解指令是如何在计算机内被执行的。在这之前，我们还需要知道计算机执行的指令是什么样子
  的。

  指令系统这章里主要的内容是指令格式和指令的寻址方式。指令格式，看名字就知道是在说指令
  是什么样的。我们知道计算机最底层都是电路，现代计算机由于硬件限制一般都是二进制计算机，
  即只用高低两种电平表示0和1. 这就是计算机执行的东西，一连串0和1. 但是对于人类来说，
  直接处理这串0和1（在纸带上打孔哈哈哈）是极不友好，反人类的。汇编指令就是把一连串0和
  1分组后用助记符标识的形式表示，方便人类阅读和编程。如何把助记符翻译成一串0和1叫做
  汇编，一串0和1如何写成助记符叫做反汇编。我们知道冯诺依曼架构的计算机中存储器是按地址
  划分的，给出地址的方法有好多。包括直接给出，存在寄存器中给寄存器号，给出一个存着目标
  数据地址的存储器地址（间接地址），给一个地址和到目标的偏移量等。不同的方式适用于不同
  情况，对应不同的指令结构。这就是指令的寻址方式。

  既然有了0-1组成的二进制数据，他们要如何在CPU中进行运算，通过哪些部件（ALU，寄存器，
  主存，左移单元），最后变成我们想要的结果。这其中各部件的排列，连接组成数据通路，数据
  经过后给出正确的结果。对于数据通路的研究是CPU这章的主要内容。为了确认输出的电平能够
  在稳定的时候被读出，我们引入时钟概念，就是将时间分为离散的时间片，只在到达时间片结尾
  的时候进行读取/改变操作。一个时间片的时间称为时钟周期。在单指令CPU中，执行一条指令用
  一个时钟周期，这期间给定了输入后就一直等待，直到数据经过了所有部件最后输出稳定的结果。
  但这个等待的时间太长了，这一个时钟周期中并不是在所有时间每个部件都在工作。因此可以
  把一条指令的执行分为多个周期，规划好每个周期哪些部件执行。这样在第一个更小的周期内
  第一条指令使用了第一批部件后，在第二个周期第一条指令使用第二批部件的同时第一批部件可以
  用于执行第二条指令。第一条指令和第二条指令的执行时间有很大一部分现在可以重叠了，整体可以
  更快得到结果。这样的重叠组成了流水线，采用这种方式的CPU叫做流水线CPU. 在流水线方式中
  有时候下一指令需要用到上一指令的结果，但是在执行的时候上一指令还没算出结果，或者算出的
  结果还没写到下一指令读取的地方。这就引入了冒险。冒险包括结构冒险，数据冒险和控制冒险。解决方法有
  旁路，阻塞，预测等。
* 总线与IO
  总线是数据在CPU和主存、外设等间流通的统一路径。包括传送控制数据的控制总线，计算数据的
  数据总线和传送地址的地址总线。当多个部件连接在同一条总线上时为了避免引起冲突，多个部件
  在申请使用总线的时候需要一个方法来决定谁得到使用权，能向上面传送数据。总线仲裁的方法
  有集中式仲裁和分布式仲裁。集中式里有链式查询法，计时器定时查询，独立请求方式。

  最后我们来讨论一下外设是怎么和主机进行交互的。主机提供了IO接口，外设自带设备控制器，
  外设受到设备控制器接到来自IO接口的信号后的控制，将数据传输至IO接口等待主机读取，或
  从IO接口读取数据。CPU在受到来自IO接口的信号后需要处理来自外设的数据，但是CPU也要
  执行自己的其他任务。这时候可以使用的处理办法（IO方式）有4种：程序查询方式，程序
  中断方式，DMA方式和通道方式。程序查询方式是CPU停止手头的工作，隔一段时间就去问一下
  IO端口准备好数据没，准备好了就拿来处理，处理后继续不停的问。程序中断方式是CPU自己
  干自己的事，IO端口准备好了就给它发信号，CPU收到后暂时停下手头工作，把正在工作的
  所有材料放好后来处理IO事件，处理好后拿回材料继续干活。DMA方式是CPU告诉DMA控制器
  数据块传输的地址后把其他繁琐的事情外包给DMA控制器，不用在每次IO时自己来传输每个字节。
  DMA控制器每次收到IO端口的信号后自动把数据送到内存指定的地方，存满一块后再告诉CPU，
  CPU又告诉他接下来的操作。最后的通道方式则是把确定传输块地址的任务也外包给了通道，
  IO传输相关的任务全给通道做，CPU只用在事前把给通道的指令先放到内存中，通道就自动按
  指令做好了工作。
